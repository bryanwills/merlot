load = s => window

log = val => out(__as_ink_string(string(val) + __Ink_String(`
`)));
scan = cb => (() => { let acc; acc = [__Ink_String(``)]; return __ink_ident_in(evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`end`)), () => (cb((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()))], [() => (__Ink_String(`data`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})() + slice((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(), 0, (len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) - 1)))) : (__ink_assgn_trgt[0]) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})() + slice((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(), 0, (len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) - 1))); return __ink_assgn_trgt})(); return false })())]])) })();
hToN = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, [__Ink_String(`a`)]: 10, [__Ink_String(`b`)]: 11, [__Ink_String(`c`)]: 12, [__Ink_String(`d`)]: 13, [__Ink_String(`e`)]: 14, [__Ink_String(`f`)]: 15};
nToH = __Ink_String(`0123456789abcdef`);
hex = n => (() => { let __ink_trampolined_sub; let sub; return sub = (p, acc) => (() => { __ink_trampolined_sub = (p, acc) => __ink_match((p < 16), [[() => (true), () => (__as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(nToH); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return p })()] || null : (__ink_acc_trgt[(() => { return p })()] !== undefined ? __ink_acc_trgt[(() => { return p })()] : null)})() + acc))], [() => (false), () => (__ink_trampoline(__ink_trampolined_sub, floor((p / 16)), __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(nToH); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (p % 16) })()] || null : (__ink_acc_trgt[(() => { return (p % 16) })()] !== undefined ? __ink_acc_trgt[(() => { return (p % 16) })()] : null)})() + acc)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, p, acc) })() })()(floor(n), __Ink_String(``));
xeh = s => (() => { let max; max = len(s); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), __as_ink_string((acc * 16) + (() => {let __ink_acc_trgt = __as_ink_string(hToN); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()] : null)})())))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, 0) })();
min = numbers => reduce(numbers, (acc, n) => __ink_match((n < acc), [[() => (true), () => (n)], [() => (false), () => (acc)]]), (() => {let __ink_acc_trgt = __as_ink_string(numbers); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})());
max = numbers => reduce(numbers, (acc, n) => __ink_match((n > acc), [[() => (true), () => (n)], [() => (false), () => (acc)]]), (() => {let __ink_acc_trgt = __as_ink_string(numbers); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})());
range = (start, end, step) => (() => { let __ink_trampolined_sub; let span; let sub; span = (end - start); sub = (i, v, acc) => (() => { __ink_trampolined_sub = (i, v, acc) => __ink_match((((() => { return (v - start) })() / span) < 1), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), v) : (__ink_assgn_trgt[(() => { return i })()]) = v; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), __as_ink_string(v + step), acc) })())], [() => (false), () => (acc)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, v, acc) })(); return __ink_match((((() => { return (end - start) })() / step) > 0), [[() => (true), () => (sub(0, start, []))], [() => (false), () => ([])]]) })();
clamp = (start, end, min, max) => (() => { start = (() => { return __ink_match((start < min), [[() => (true), () => (min)], [() => (false), () => (start)]]) })(); end = (() => { return __ink_match((end < min), [[() => (true), () => (min)], [() => (false), () => (end)]]) })(); end = (() => { return __ink_match((end > max), [[() => (true), () => (max)], [() => (false), () => (end)]]) })(); start = (() => { return __ink_match((start > end), [[() => (true), () => (end)], [() => (false), () => (start)]]) })(); return {start: start, end: end} })();
slice = (s, start, end) => (() => { let max; let x; x = clamp(start, end, 0, len(s)); start = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[start] || null : (__ink_acc_trgt.start !== undefined ? __ink_acc_trgt.start : null)})(); max = ((() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[end] || null : (__ink_acc_trgt.end !== undefined ? __ink_acc_trgt.end : null)})() - start); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(start + i) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(start + i) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] : null)})(); return __ink_assgn_trgt})()))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, __ink_match(type(s), [[() => (__Ink_String(`string`)), () => (__Ink_String(``))], [() => (__Ink_String(`composite`)), () => ([])]])) })();
append = (base, child) => (() => { let baseLength; let childLength; baseLength = len(base); childLength = len(child); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (childLength), () => (base)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(base); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return __as_ink_string(baseLength + i) })(), (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})()) : (__ink_assgn_trgt[(() => { return __as_ink_string(baseLength + i) })()]) = (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
join = (base, child) => append(clone(base), child);
clone = x => __ink_match(type(x), [[() => (__Ink_String(`string`)), () => (__as_ink_string(__Ink_String(``) + x))], [() => (__Ink_String(`composite`)), () => (reduce(keys(x), (acc, k) => (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return k })(), (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})()) : (__ink_assgn_trgt[(() => { return k })()]) = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})(); return __ink_assgn_trgt})(), {}))], [() => (__Ink_Empty), () => (x)]]);
stringList = list => __as_ink_string(__as_ink_string(__Ink_String(`[`) + cat(map(list, string), __Ink_String(`, `))) + __Ink_String(`]`));
reverse = list => (() => { let __ink_trampolined_sub; let sub; return sub = (acc, i, j) => (() => { __ink_trampolined_sub = (acc, i, j) => __ink_match(j, [[() => (0), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(); return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})(); return __ink_assgn_trgt})(), __as_ink_string(i + 1), (j - 1)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, acc, i, j) })() })()([], 0, (len(list) - 1));
map = (list, f) => reduce(list, (l, item, i) => (() => {let __ink_assgn_trgt = __as_ink_string(l); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), f(item, i)) : (__ink_assgn_trgt[(() => { return i })()]) = f(item, i); return __ink_assgn_trgt})(), {});
filter = (list, f) => reduce(list, (l, item, i) => __ink_match(f(item, i), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(l); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(l), item) : (__ink_assgn_trgt[len(l)]) = item; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (l)]]), []);
reduce = (list, f, acc) => (() => { let max; max = len(list); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), f(acc, (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), i)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, acc) })();
reduceBack = (list, f, acc) => (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (__ink_negate(1)), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (i - 1), f(acc, (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), i)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()((len(list) - 1), acc);
flatten = list => reduce(list, append, []);
some = list => reduce(list, (acc, x) => __ink_or(acc, x), false);
every = list => reduce(list, (acc, x) => __ink_and(acc, x), true);
cat = (list, joiner) => (() => { let max; return __ink_match(max = len(list), [[() => (0), () => (__Ink_String(``))], [() => (__Ink_Empty), () => ((() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), __as_ink_string(joiner + (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})())) : (__ink_assgn_trgt[len(acc)]) = __as_ink_string(joiner + (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})()); return __ink_assgn_trgt})()))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(1, clone((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())))]]) })();
each = (list, f) => (() => { let max; max = len(list); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (max), () => (null)], [() => (__Ink_Empty), () => ((() => { f((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), i); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
encode = str => (() => { let max; max = len(str); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), point((() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})())) : (__ink_assgn_trgt[(() => { return i })()]) = point((() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})()); return __ink_assgn_trgt})()))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, []) })();
decode = data => reduce(data, (acc, cp) => (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), char(cp)) : (__ink_assgn_trgt[len(acc)]) = char(cp); return __ink_assgn_trgt})(), __Ink_String(``));
readFile = (path, cb) => (() => { let BufSize; BufSize = 4096; return (() => { let sub; return sub = (offset, acc) => read(path, offset, BufSize, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`error`)), () => (cb(null))], [() => (__Ink_String(`data`)), () => ((() => { let dataLen; dataLen = len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()); return __ink_match(__ink_eq(dataLen, BufSize), [[() => (true), () => (sub(__as_ink_string(offset + dataLen), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) : (__ink_assgn_trgt[len(acc)]) = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(); return __ink_assgn_trgt})()))], [() => (false), () => (cb((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) : (__ink_assgn_trgt[len(acc)]) = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(); return __ink_assgn_trgt})()))]]) })())]])) })()(0, __Ink_String(``)) })();
writeFile = (path, data, cb) => __ink_ident_delete(path, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`end`)), () => (write(path, 0, data, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`error`)), () => (cb(null))], [() => (__Ink_String(`end`)), () => (cb(true))]])))], [() => (__Ink_Empty), () => (cb(null))]]));
format = (raw, values) => (() => { let append; let max; let readNext; let state; state = {idx: 0, which: 0, key: __Ink_String(``), buf: __Ink_String(``)}; append = c => (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c)) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c); return __ink_assgn_trgt})(); readNext = () => (() => { let c; c = (() => {let __ink_acc_trgt = __as_ink_string(raw); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[which] || null : (__ink_acc_trgt.which !== undefined ? __ink_acc_trgt.which : null)})(), [[() => (0), () => (__ink_match(c, [[() => (__Ink_String(`{`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 1) : (__ink_assgn_trgt.which) = 1; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (append(c))]]))], [() => (1), () => (__ink_match(c, [[() => (__Ink_String(`{`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 2) : (__ink_assgn_trgt.which) = 2; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => ((() => { append(__as_ink_string(__Ink_String(`{`) + c)); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 0) : (__ink_assgn_trgt.which) = 0; return __ink_assgn_trgt})() })())]]))], [() => (2), () => (__ink_match(c, [[() => (__Ink_String(`}`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + string((() => {let __ink_acc_trgt = __as_ink_string(values); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] : null)})()))) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + string((() => {let __ink_acc_trgt = __as_ink_string(values); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] : null)})())); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, __Ink_String(``)) : (__ink_assgn_trgt.key) = __Ink_String(``); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 3) : (__ink_assgn_trgt.which) = 3; return __ink_assgn_trgt})() })())], [() => (__Ink_String(` `)), () => (null)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() + c)) : (__ink_assgn_trgt.key) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() + c); return __ink_assgn_trgt})())]]))], [() => (3), () => (__ink_match(c, [[() => (__Ink_String(`}`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 0) : (__ink_assgn_trgt.which) = 0; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (null)]]))]]); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})() })(); max = len(raw); return (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match(((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() < max), [[() => (true), () => ((() => { readNext(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (false), () => ((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()() })()

std = load(__Ink_String(`std`));
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
reduce = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduce] || null : (__ink_acc_trgt.reduce !== undefined ? __ink_acc_trgt.reduce : null)})();
reduceBack = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduceBack] || null : (__ink_acc_trgt.reduceBack !== undefined ? __ink_acc_trgt.reduceBack : null)})();
checkRange = (lo, hi) => c => (() => { let p; p = point(c); return __ink_and((lo < p), (p < hi)) })();
upper__ink_qm__ = checkRange((point(__Ink_String(`A`)) - 1), __as_ink_string(point(__Ink_String(`Z`)) + 1));
lower__ink_qm__ = checkRange((point(__Ink_String(`a`)) - 1), __as_ink_string(point(__Ink_String(`z`)) + 1));
digit__ink_qm__ = checkRange((point(__Ink_String(`0`)) - 1), __as_ink_string(point(__Ink_String(`9`)) + 1));
letter__ink_qm__ = c => __ink_or(upper__ink_qm__(c), lower__ink_qm__(c));
ws__ink_qm__ = c => __ink_match(point(c), [[() => (32), () => (true)], [() => (10), () => (true)], [() => (9), () => (true)], [() => (13), () => (true)], [() => (__Ink_Empty), () => (false)]]);
hasPrefix__ink_qm__ = (s, prefix) => reduce(prefix, (acc, c, i) => __ink_and(acc, (() => { return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), c) })()), true);
hasSuffix__ink_qm__ = (s, suffix) => (() => { let diff; diff = (len(s) - len(suffix)); return reduce(suffix, (acc, c, i) => __ink_and(acc, (() => { return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(i + diff) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(i + diff) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(i + diff) })()] : null)})(), c) })()), true) })();
matchesAt__ink_qm__ = (s, substring, idx) => (() => { let max; max = len(substring); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (max), () => (true)], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + i) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + i) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + i) })()] : null)})(), [[() => ((() => { return (() => {let __ink_acc_trgt = __as_ink_string(substring); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)))], [() => (__Ink_Empty), () => (false)]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
index = (s, substring) => (() => { let max; max = (len(s) - 1); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(matchesAt__ink_qm__(s, substring, i), [[() => (true), () => (i)], [() => (false), () => (__ink_match((i < max), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)))], [() => (false), () => (__ink_negate(1))]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
contains__ink_qm__ = (s, substring) => (index(s, substring) > __ink_negate(1));
lower = s => reduce(s, (acc, c, i) => __ink_match(upper__ink_qm__(c), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), char(__as_ink_string(point(c) + 32))) : (__ink_assgn_trgt[(() => { return i })()]) = char(__as_ink_string(point(c) + 32)); return __ink_assgn_trgt})())], [() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), c) : (__ink_assgn_trgt[(() => { return i })()]) = c; return __ink_assgn_trgt})())]]), __Ink_String(``));
upper = s => reduce(s, (acc, c, i) => __ink_match(lower__ink_qm__(c), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), char((point(c) - 32))) : (__ink_assgn_trgt[(() => { return i })()]) = char((point(c) - 32)); return __ink_assgn_trgt})())], [() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), c) : (__ink_assgn_trgt[(() => { return i })()]) = c; return __ink_assgn_trgt})())]]), __Ink_String(``));
title = s => (() => { let lowered; lowered = lower(s); return (() => {let __ink_assgn_trgt = __as_ink_string(lowered); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, upper((() => {let __ink_acc_trgt = __as_ink_string(lowered); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())) : (__ink_assgn_trgt[0]) = upper((() => {let __ink_acc_trgt = __as_ink_string(lowered); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()); return __ink_assgn_trgt})() })();
replaceNonEmpty = (s, old, __ink_ident_new) => (() => { let lnew; let lold; lold = len(old); lnew = len(__ink_ident_new); return (() => { let __ink_trampolined_sub; let sub; return sub = (acc, i) => (() => { __ink_trampolined_sub = (acc, i) => __ink_match(matchesAt__ink_qm__(acc, old, i), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(__as_ink_string(slice(acc, 0, i) + __ink_ident_new) + slice(acc, __as_ink_string(i + lold), len(acc))), __as_ink_string(i + lnew)))], [() => (false), () => (__ink_match((i < len(acc)), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, acc, __as_ink_string(i + 1)))], [() => (false), () => (acc)]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, acc, i) })() })()(s, 0) })();
replace = (s, old, __ink_ident_new) => __ink_match(old, [[() => (__Ink_String(``)), () => (s)], [() => (__Ink_Empty), () => (replaceNonEmpty(s, old, __ink_ident_new))]]);
splitNonEmpty = (s, delim) => (() => { let coll; let ldelim; coll = []; ldelim = len(delim); return (() => { let __ink_trampolined_sub; let sub; return sub = (acc, i, last) => (() => { __ink_trampolined_sub = (acc, i, last) => __ink_match(matchesAt__ink_qm__(acc, delim, i), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(coll); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(coll), slice(acc, last, i)) : (__ink_assgn_trgt[len(coll)]) = slice(acc, last, i); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, acc, __as_ink_string(i + ldelim), __as_ink_string(i + ldelim)) })())], [() => (false), () => (__ink_match((i < len(acc)), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, acc, __as_ink_string(i + 1), last))], [() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(coll); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(coll), slice(acc, last, len(acc))) : (__ink_assgn_trgt[len(coll)]) = slice(acc, last, len(acc)); return __ink_assgn_trgt})())]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, acc, i, last) })() })()(s, 0, 0) })();
split = (s, delim) => __ink_match(delim, [[() => (__Ink_String(``)), () => (map(s, c => c))], [() => (__Ink_Empty), () => (splitNonEmpty(s, delim))]]);
trimPrefixNonEmpty = (s, prefix) => (() => { let idx; let lpref; let max; max = len(s); lpref = len(prefix); idx = (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match((i < max), [[() => (true), () => (__ink_match(matchesAt__ink_qm__(s, prefix, i), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + lpref)))], [() => (false), () => (i)]]))], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0); return slice(s, idx, len(s)) })();
trimPrefix = (s, prefix) => __ink_match(prefix, [[() => (__Ink_String(``)), () => (s)], [() => (__Ink_Empty), () => (trimPrefixNonEmpty(s, prefix))]]);
trimSuffixNonEmpty = (s, suffix) => (() => { let idx; let lsuf; lsuf = len(suffix); idx = (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match((i > __ink_negate(1)), [[() => (true), () => (__ink_match(matchesAt__ink_qm__(s, suffix, (i - lsuf)), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, (i - lsuf)))], [() => (false), () => (i)]]))], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(len(s)); return slice(s, 0, idx) })();
trimSuffix = (s, suffix) => __ink_match(suffix, [[() => (__Ink_String(``)), () => (s)], [() => (__Ink_Empty), () => (trimSuffixNonEmpty(s, suffix))]]);
trim = (s, ss) => trimPrefix(trimSuffix(s, ss), ss)

std = load(__Ink_String(`../vendor/std`));
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
clone = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clone] || null : (__ink_acc_trgt.clone !== undefined ? __ink_acc_trgt.clone : null)})();
sortBy = (v, pred) => (() => { let partition; let vPred; vPred = map(v, pred); partition = (v, lo, hi) => (() => { let __ink_trampolined_lsub; let __ink_trampolined_rsub; let lsub; let pivot; let rsub; pivot = (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return lo })()] || null : (__ink_acc_trgt[(() => { return lo })()] !== undefined ? __ink_acc_trgt[(() => { return lo })()] : null)})(); lsub = i => (() => { __ink_trampolined_lsub = i => __ink_match((() => { return ((() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() < pivot) })(), [[() => (true), () => (__ink_trampoline(__ink_trampolined_lsub, __as_ink_string(i + 1)))], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_lsub, i) })(); rsub = j => (() => { __ink_trampolined_rsub = j => __ink_match((() => { return ((() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})() > pivot) })(), [[() => (true), () => (__ink_trampoline(__ink_trampolined_rsub, (j - 1)))], [() => (false), () => (j)]]); return __ink_resolve_trampoline(__ink_trampolined_rsub, j) })(); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, j) => (() => { __ink_trampolined_sub = (i, j) => (() => { i = lsub(i); j = rsub(j); return __ink_match((() => { return (i < j) })(), [[() => (false), () => (j)], [() => (true), () => ((() => { let tmp; let tmpPred; tmp = (() => {let __ink_acc_trgt = __as_ink_string(v); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(); tmpPred = (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(v); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(v); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(v); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(v); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return j })(), tmp) : (__ink_assgn_trgt[(() => { return j })()]) = tmp; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(vPred); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(vPred); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return j })(), tmpPred) : (__ink_assgn_trgt[(() => { return j })()]) = tmpPred; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (j - 1)) })())]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub, i, j) })() })()(lo, hi) })(); return (() => { let __ink_trampolined_quicksort; let quicksort; return quicksort = (v, lo, hi) => (() => { __ink_trampolined_quicksort = (v, lo, hi) => __ink_match(len(v), [[() => (0), () => (v)], [() => (__Ink_Empty), () => (__ink_match((() => { return (lo < hi) })(), [[() => (false), () => (v)], [() => (true), () => ((() => { let p; p = partition(v, lo, hi); quicksort(v, lo, p); return __ink_trampoline(__ink_trampolined_quicksort, v, __as_ink_string(p + 1), hi) })())]]))]]); return __ink_resolve_trampoline(__ink_trampolined_quicksort, v, lo, hi) })() })()(v, 0, (len(v) - 1)) })();
sort__ink_em__ = v => sortBy(v, x => x);
sort = v => sort__ink_em__(clone(v))

std = load(__Ink_String(`../vendor/std`));
str = load(__Ink_String(`../vendor/str`));
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
append = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[append] || null : (__ink_acc_trgt.append !== undefined ? __ink_acc_trgt.append : null)})();
split = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[split] || null : (__ink_acc_trgt.split !== undefined ? __ink_acc_trgt.split : null)})();
hasPrefix__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[hasPrefix__ink_qm__] || null : (__ink_acc_trgt.hasPrefix__ink_qm__ !== undefined ? __ink_acc_trgt.hasPrefix__ink_qm__ : null)})();
Newline = char(10);
Reader = s => (() => { let S; let back; let expect__ink_qm__; let itemIndex; let last; let next; let peek; let readUntil; let readUntilEnd; let readUntilMatchingDelim; let readUntilPrefix; S = {i: 0}; peek = () => (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(); last = () => (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1) })()] || null : (__ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1) })()] : null)})(); back = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), [[() => (0), () => (0)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1)) : (__ink_assgn_trgt.i) = ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1); return __ink_assgn_trgt})())]]); next = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), [[() => (len(s)), () => (null)], [() => (__Ink_Empty), () => ((() => { let c; c = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return c })())]]); expect__ink_qm__ = prefix => __ink_match(hasPrefix__ink_qm__(slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), prefix), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + len(prefix))) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + len(prefix)); return __ink_assgn_trgt})(); return true })())], [() => (__Ink_Empty), () => (false)]]); itemIndex = (list, it) => (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match((i < len(list)), [[() => (true), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), [[() => (it), () => (i)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)))]]))], [() => (__Ink_Empty), () => (__ink_negate(1))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0); readUntil = c => (() => { let i; return __ink_match(i = itemIndex(slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), c), [[() => (__ink_negate(1)), () => (null)], [() => (__Ink_Empty), () => ((() => { let substr; substr = slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + i)); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + i)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + i); return __ink_assgn_trgt})(); return substr })())]]) })(); readUntilPrefix = prefix => (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => (() => { let part; return __ink_match((__as_ink_string(i + len(prefix)) > len(s)), [[() => (true), () => (null)], [() => (__Ink_Empty), () => (__ink_match(part = slice(s, i, __as_ink_string(i + len(prefix))), [[() => (prefix), () => ((() => { let substr; substr = slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), i); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, i) : (__ink_assgn_trgt.i) = i; return __ink_assgn_trgt})(); return substr })())], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)))]]))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})()); readUntilEnd = () => (() => { let substr; substr = slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, len(s)) : (__ink_assgn_trgt.i) = len(s); return __ink_assgn_trgt})(); return substr })(); readUntilMatchingDelim = left => (() => { let matchingDelimIdx; let right; right = (() => { return __ink_match(left, [[() => (__Ink_String(`[`)), () => (__Ink_String(`]`))], [() => (__Ink_String(`(`)), () => (__Ink_String(`)`))], [() => (__Ink_Empty), () => (null)]]) })(); matchingDelimIdx = (() => { let __ink_trampolined_sub; let sub; return sub = (i, stack) => (() => { __ink_trampolined_sub = (i, stack) => (() => { let c; return __ink_match(stack, [[() => (0), () => ((i - 1))], [() => (__Ink_Empty), () => (__ink_match(c = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), [[() => (null), () => (__ink_negate(1))], [() => (left), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), __as_ink_string(stack + 1)))], [() => (right), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (stack - 1)))], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), stack))]]))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub, i, stack) })() })()((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), 1); return __ink_match(matchingDelimIdx, [[() => (__ink_negate(1)), () => (null)], [() => (__Ink_Empty), () => ((() => { let substr; substr = slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), matchingDelimIdx); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, matchingDelimIdx) : (__ink_assgn_trgt.i) = matchingDelimIdx; return __ink_assgn_trgt})(); return substr })())]]) })(); return {peek: peek, last: last, back: back, next: next, expect__ink_qm__: expect__ink_qm__, readUntil: readUntil, readUntilPrefix: readUntilPrefix, readUntilEnd: readUntilEnd, readUntilMatchingDelim: readUntilMatchingDelim} })()

std = load(__Ink_String(`../vendor/std`));
str = load(__Ink_String(`../vendor/str`));
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
filter = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[filter] || null : (__ink_acc_trgt.filter !== undefined ? __ink_acc_trgt.filter : null)})();
reduce = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduce] || null : (__ink_acc_trgt.reduce !== undefined ? __ink_acc_trgt.reduce : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
every = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[every] || null : (__ink_acc_trgt.every !== undefined ? __ink_acc_trgt.every : null)})();
append = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[append] || null : (__ink_acc_trgt.append !== undefined ? __ink_acc_trgt.append : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
ws__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ws__ink_qm__] || null : (__ink_acc_trgt.ws__ink_qm__ !== undefined ? __ink_acc_trgt.ws__ink_qm__ : null)})();
digit__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[digit__ink_qm__] || null : (__ink_acc_trgt.digit__ink_qm__ !== undefined ? __ink_acc_trgt.digit__ink_qm__ : null)})();
letter__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[letter__ink_qm__] || null : (__ink_acc_trgt.letter__ink_qm__ !== undefined ? __ink_acc_trgt.letter__ink_qm__ : null)})();
index = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[index] || null : (__ink_acc_trgt.index !== undefined ? __ink_acc_trgt.index : null)})();
hasPrefix__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[hasPrefix__ink_qm__] || null : (__ink_acc_trgt.hasPrefix__ink_qm__ !== undefined ? __ink_acc_trgt.hasPrefix__ink_qm__ : null)})();
hasSuffix__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[hasSuffix__ink_qm__] || null : (__ink_acc_trgt.hasSuffix__ink_qm__ !== undefined ? __ink_acc_trgt.hasSuffix__ink_qm__ : null)})();
trimPrefix = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[trimPrefix] || null : (__ink_acc_trgt.trimPrefix !== undefined ? __ink_acc_trgt.trimPrefix : null)})();
replace = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replace] || null : (__ink_acc_trgt.replace !== undefined ? __ink_acc_trgt.replace : null)})();
split = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[split] || null : (__ink_acc_trgt.split !== undefined ? __ink_acc_trgt.split : null)})();
Reader = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`reader`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Reader] || null : (__ink_acc_trgt.Reader !== undefined ? __ink_acc_trgt.Reader : null)})();
Newline = char(10);
Tab = char(9);
Node = {P: __Ink_String(`p`), Em: __Ink_String(`em`), Strong: __Ink_String(`strong`), Strike: __Ink_String(`strike`), A: __Ink_String(`a`), H1: __Ink_String(`h1`), H2: __Ink_String(`h2`), H3: __Ink_String(`h3`), H4: __Ink_String(`h4`), H5: __Ink_String(`h5`), H6: __Ink_String(`h6`), Quote: __Ink_String(`blockquote`), Img: __Ink_String(`img`), Pre: __Ink_String(`pre`), Code: __Ink_String(`code`), UList: __Ink_String(`ul`), OList: __Ink_String(`ol`), Item: __Ink_String(`li`), Checkbox: __Ink_String(`checkbox`), Br: __Ink_String(`br`), Hr: __Ink_String(`hr`), Empty: __Ink_String(`-empty`), RawHTML: __Ink_String(`-raw-html`)};
wordChar__ink_qm__ = c => __ink_or(__ink_or(digit__ink_qm__(c), letter__ink_qm__(c)), (point(c) > 127));
tokenizeText = line => (() => { let append; let next; let peek; let push; let reader; let tokens; reader = Reader(line); peek = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); tokens = [__Ink_String(``)]; push = tok => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(tokens); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(tokens), tok) : (__ink_assgn_trgt[len(tokens)]) = tok; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(tokens); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(tokens), __Ink_String(``)) : (__ink_assgn_trgt[len(tokens)]) = __Ink_String(``); return __ink_assgn_trgt})() })(); append = suffix => (() => {let __ink_assgn_trgt = __as_ink_string(tokens); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (len(tokens) - 1) })(), __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(tokens) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(tokens) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(tokens) - 1) })()] : null)})() + suffix)) : (__ink_assgn_trgt[(() => { return (len(tokens) - 1) })()]) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(tokens) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(tokens) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(tokens) - 1) })()] : null)})() + suffix); return __ink_assgn_trgt})(); (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => (() => { let c; let d; return __ink_match(c = next(), [[() => (null), () => (null)], [() => (__Ink_String(`_`)), () => ((() => { __ink_match(peek(), [[() => (__Ink_String(`_`)), () => ((() => { next(); return push(__Ink_String(`__`)) })())], [() => (__Ink_Empty), () => (push(__Ink_String(`_`)))]]); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`*`)), () => ((() => { __ink_match(peek(), [[() => (__Ink_String(`*`)), () => ((() => { next(); return push(__Ink_String(`**`)) })())], [() => (__Ink_Empty), () => (push(__Ink_String(`*`)))]]); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`\\`)), () => (__ink_match(d = next(), [[() => (null), () => (null)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, append(d)))]]))], [() => (__Ink_String(`\``)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`\``))))], [() => (__Ink_String(`~`)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`~`))))], [() => (__Ink_String(`!`)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`!`))))], [() => (__Ink_String(`[`)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`[`))))], [() => (__Ink_String(`]`)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`]`))))], [() => (__Ink_String(`(`)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`(`))))], [() => (__Ink_String(`)`)), () => (__ink_trampoline(__ink_trampolined_sub, push(__Ink_String(`)`))))], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, append(c)))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()(); return filter(tokens, tok => (len(tok) > 0)) })();
unifyTextNodes = (nodes, joiner) => reduce(nodes, (acc, child) => (() => { let last; return __ink_match(type(child), [[() => (__Ink_String(`string`)), () => (__ink_match(type(last = (() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(acc) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(acc) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(acc) - 1) })()] : null)})()), [[() => (__Ink_String(`string`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (len(acc) - 1) })(), __as_ink_string(__as_ink_string(last + joiner) + child)) : (__ink_assgn_trgt[(() => { return (len(acc) - 1) })()]) = __as_ink_string(__as_ink_string(last + joiner) + child); return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), child) : (__ink_assgn_trgt[len(acc)]) = child; return __ink_assgn_trgt})())]]))], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})(), [[() => (null), () => (child)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(child); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(children, unifyTextNodes((() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})(), joiner)) : (__ink_assgn_trgt.children) = unifyTextNodes((() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})(), joiner); return __ink_assgn_trgt})())]]) })()) : (__ink_assgn_trgt[len(acc)]) = (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})(), [[() => (null), () => (child)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(child); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(children, unifyTextNodes((() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})(), joiner)) : (__ink_assgn_trgt.children) = unifyTextNodes((() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})(), joiner); return __ink_assgn_trgt})())]]) })(); return __ink_assgn_trgt})())]]) })(), []);
parseText = tokens => (() => { let handleDelimitedRange; let next; let nodes; let peek; let readUntil; let readUntilMatchingDelim; let reader; reader = Reader(tokens); peek = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); readUntil = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntil] || null : (__ink_acc_trgt.readUntil !== undefined ? __ink_acc_trgt.readUntil : null)})(); readUntilMatchingDelim = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntilMatchingDelim] || null : (__ink_acc_trgt.readUntilMatchingDelim !== undefined ? __ink_acc_trgt.readUntilMatchingDelim : null)})(); handleDelimitedRange = (tok, tag, nodes, sub) => (() => { let range; return __ink_match(range = readUntil(tok), [[() => (null), () => (sub((() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), tok) : (__ink_assgn_trgt[len(nodes)]) = tok; return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => ((() => { next(); (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), {tag: tag, children: parseText(range)}) : (__ink_assgn_trgt[len(nodes)]) = {tag: tag, children: parseText(range)}; return __ink_assgn_trgt})(); return sub(nodes) })())]]) })(); nodes = (() => { let __ink_trampolined_sub; let sub; return sub = nodes => (() => { __ink_trampolined_sub = nodes => (() => { let c; let range; let tok; let urlRange; return __ink_match(tok = next(), [[() => (null), () => (nodes)], [() => (__Ink_String(`_`)), () => (handleDelimitedRange(__Ink_String(`_`), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Em] || null : (__ink_acc_trgt.Em !== undefined ? __ink_acc_trgt.Em : null)})(), nodes, sub))], [() => (__Ink_String(`__`)), () => (handleDelimitedRange(__Ink_String(`__`), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Strong] || null : (__ink_acc_trgt.Strong !== undefined ? __ink_acc_trgt.Strong : null)})(), nodes, sub))], [() => (__Ink_String(`*`)), () => (handleDelimitedRange(__Ink_String(`*`), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Em] || null : (__ink_acc_trgt.Em !== undefined ? __ink_acc_trgt.Em : null)})(), nodes, sub))], [() => (__Ink_String(`**`)), () => (handleDelimitedRange(__Ink_String(`**`), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Strong] || null : (__ink_acc_trgt.Strong !== undefined ? __ink_acc_trgt.Strong : null)})(), nodes, sub))], [() => (__Ink_String(`\``)), () => (handleDelimitedRange(__Ink_String(`\``), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Code] || null : (__ink_acc_trgt.Code !== undefined ? __ink_acc_trgt.Code : null)})(), nodes, sub))], [() => (__Ink_String(`~`)), () => (handleDelimitedRange(__Ink_String(`~`), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Strike] || null : (__ink_acc_trgt.Strike !== undefined ? __ink_acc_trgt.Strike : null)})(), nodes, sub))], [() => (__Ink_String(`[`)), () => (__ink_match(range = readUntilMatchingDelim(__Ink_String(`[`)), [[() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), tok) : (__ink_assgn_trgt[len(nodes)]) = tok; return __ink_assgn_trgt})()))], [() => ([__Ink_String(`x`)]), () => ((() => { next(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: true}) : (__ink_assgn_trgt[len(nodes)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: true}; return __ink_assgn_trgt})()) })())], [() => ([__Ink_String(` `)]), () => ((() => { next(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: false}) : (__ink_assgn_trgt[len(nodes)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: false}; return __ink_assgn_trgt})()) })())], [() => (__Ink_Empty), () => (__ink_match(c = (() => { next(); return next() })(), [[() => (__Ink_String(`(`)), () => (__ink_match(urlRange = readUntilMatchingDelim(c), [[() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(__as_ink_string(__as_ink_string(tok + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c)) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(__as_ink_string(__as_ink_string(tok + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c); return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => ((() => { let link; next(); link = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[A] || null : (__ink_acc_trgt.A !== undefined ? __ink_acc_trgt.A : null)})(), href: cat(urlRange, __Ink_String(``)), children: parseText(range)}; return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), link) : (__ink_assgn_trgt[len(nodes)]) = link; return __ink_assgn_trgt})()) })())]]))], [() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(__as_ink_string(tok + cat(range, __Ink_String(``))) + __Ink_String(`]`))) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(__as_ink_string(tok + cat(range, __Ink_String(``))) + __Ink_String(`]`)); return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(__as_ink_string(__as_ink_string(tok + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c)) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(__as_ink_string(__as_ink_string(tok + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c); return __ink_assgn_trgt})()))]]))]]))], [() => (__Ink_String(`!`)), () => (__ink_match(peek(), [[() => (__Ink_String(`[`)), () => (__ink_match(range = (() => { next(); return readUntilMatchingDelim(__Ink_String(`[`)) })(), [[() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(tok + __Ink_String(`[`))) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(tok + __Ink_String(`[`)); return __ink_assgn_trgt})()))], [() => ([__Ink_String(`x`)]), () => ((() => { next(); (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), tok) : (__ink_assgn_trgt[len(nodes)]) = tok; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: true}) : (__ink_assgn_trgt[len(nodes)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: true}; return __ink_assgn_trgt})()) })())], [() => ([__Ink_String(` `)]), () => ((() => { next(); (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), tok) : (__ink_assgn_trgt[len(nodes)]) = tok; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: false}) : (__ink_assgn_trgt[len(nodes)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})(), checked: false}; return __ink_assgn_trgt})()) })())], [() => (__Ink_Empty), () => (__ink_match(c = (() => { next(); return next() })(), [[() => (__Ink_String(`(`)), () => (__ink_match(urlRange = readUntilMatchingDelim(c), [[() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(__as_ink_string(__as_ink_string(__as_ink_string(tok + __Ink_String(`[`)) + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c)) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(__as_ink_string(__as_ink_string(__as_ink_string(tok + __Ink_String(`[`)) + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c); return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => ((() => { let img; next(); img = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Img] || null : (__ink_acc_trgt.Img !== undefined ? __ink_acc_trgt.Img : null)})(), alt: cat(range, __Ink_String(``)), src: cat(urlRange, __Ink_String(``))}; return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), img) : (__ink_assgn_trgt[len(nodes)]) = img; return __ink_assgn_trgt})()) })())]]))], [() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(__as_ink_string(__as_ink_string(tok + __Ink_String(`[`)) + cat(range, __Ink_String(``))) + __Ink_String(`]`))) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(__as_ink_string(__as_ink_string(tok + __Ink_String(`[`)) + cat(range, __Ink_String(``))) + __Ink_String(`]`)); return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), __as_ink_string(__as_ink_string(__as_ink_string(__as_ink_string(tok + __Ink_String(`[`)) + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c)) : (__ink_assgn_trgt[len(nodes)]) = __as_ink_string(__as_ink_string(__as_ink_string(__as_ink_string(tok + __Ink_String(`[`)) + cat(range, __Ink_String(``))) + __Ink_String(`]`)) + c); return __ink_assgn_trgt})()))]]))]]))], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), tok) : (__ink_assgn_trgt[len(nodes)]) = tok; return __ink_assgn_trgt})()))]]))], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), tok) : (__ink_assgn_trgt[len(nodes)]) = tok; return __ink_assgn_trgt})()))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub, nodes) })() })()([]); return unifyTextNodes(nodes, __Ink_String(``)) })();
uListItemLine__ink_qm__ = line => __ink_match(line, [[() => (null), () => (false)], [() => (__Ink_Empty), () => (hasPrefix__ink_qm__(trimPrefix(trimPrefix(line, __Ink_String(` `)), Tab), __Ink_String(`- `)))]]);
oListItemLine__ink_qm__ = line => __ink_match(line, [[() => (null), () => (false)], [() => (__Ink_Empty), () => ((() => { let dotIndex; let trimmedStart; trimmedStart = trimPrefix(trimPrefix(line, __Ink_String(` `)), Tab); return __ink_match(dotIndex = index(trimmedStart, __Ink_String(`. `)), [[() => (__ink_negate(1)), () => (false)], [() => (0), () => (false)], [() => (__Ink_Empty), () => (every(map(slice(trimmedStart, 0, dotIndex), digit__ink_qm__)))]]) })())]]);
listItemLine__ink_qm__ = line => __ink_or(uListItemLine__ink_qm__(line), oListItemLine__ink_qm__(line));
trimUListGetLevel = reader => (() => { let level; level = len((() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntil] || null : (__ink_acc_trgt.readUntil !== undefined ? __ink_acc_trgt.readUntil : null)})() })()(__Ink_String(`-`))); each(__Ink_String(`- `), (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})()); return level })();
trimOListGetLevel = reader => (() => { let level; let next; let peek; peek = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); level = (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(ws__ink_qm__(peek()), [[() => (true), () => ((() => { next(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)) })())], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0); (() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntil] || null : (__ink_acc_trgt.readUntil !== undefined ? __ink_acc_trgt.readUntil : null)})() })()(__Ink_String(`.`)); next(); __ink_match((() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})() })()(), [[() => (__Ink_String(` `)), () => (next())]]); return level })();
lineNodeType = line => __ink_match(true, [[() => ((() => { return __ink_eq(line, null) })()), () => (null)], [() => ((() => { return __ink_eq(line, __Ink_String(``)) })()), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Empty] || null : (__ink_acc_trgt.Empty !== undefined ? __ink_acc_trgt.Empty : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`# `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H1] || null : (__ink_acc_trgt.H1 !== undefined ? __ink_acc_trgt.H1 : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`## `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H2] || null : (__ink_acc_trgt.H2 !== undefined ? __ink_acc_trgt.H2 : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`### `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H3] || null : (__ink_acc_trgt.H3 !== undefined ? __ink_acc_trgt.H3 : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`#### `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H4] || null : (__ink_acc_trgt.H4 !== undefined ? __ink_acc_trgt.H4 : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`##### `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H5] || null : (__ink_acc_trgt.H5 !== undefined ? __ink_acc_trgt.H5 : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`###### `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H6] || null : (__ink_acc_trgt.H6 !== undefined ? __ink_acc_trgt.H6 : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`>`))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Quote] || null : (__ink_acc_trgt.Quote !== undefined ? __ink_acc_trgt.Quote : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`\`\`\``))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Pre] || null : (__ink_acc_trgt.Pre !== undefined ? __ink_acc_trgt.Pre : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`---`))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Hr] || null : (__ink_acc_trgt.Hr !== undefined ? __ink_acc_trgt.Hr : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`***`))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Hr] || null : (__ink_acc_trgt.Hr !== undefined ? __ink_acc_trgt.Hr : null)})())], [() => (hasPrefix__ink_qm__(line, __Ink_String(`!html `))), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RawHTML] || null : (__ink_acc_trgt.RawHTML !== undefined ? __ink_acc_trgt.RawHTML : null)})())], [() => (uListItemLine__ink_qm__(line)), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UList] || null : (__ink_acc_trgt.UList !== undefined ? __ink_acc_trgt.UList : null)})())], [() => (oListItemLine__ink_qm__(line)), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OList] || null : (__ink_acc_trgt.OList !== undefined ? __ink_acc_trgt.OList : null)})())], [() => (__Ink_Empty), () => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[P] || null : (__ink_acc_trgt.P !== undefined ? __ink_acc_trgt.P : null)})())]]);
parse = text => parseDoc(Reader(split(text, Newline)));
parseDoc = lineReader => (() => { let next; let peek; peek = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); return (() => { let __ink_trampolined_sub; let sub; return sub = doc => (() => { __ink_trampolined_sub = doc => (() => { let nodeType; return __ink_match(nodeType = lineNodeType(peek()), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H1] || null : (__ink_acc_trgt.H1 !== undefined ? __ink_acc_trgt.H1 : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseHeader(nodeType, lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseHeader(nodeType, lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H2] || null : (__ink_acc_trgt.H2 !== undefined ? __ink_acc_trgt.H2 : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseHeader(nodeType, lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseHeader(nodeType, lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H3] || null : (__ink_acc_trgt.H3 !== undefined ? __ink_acc_trgt.H3 : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseHeader(nodeType, lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseHeader(nodeType, lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H4] || null : (__ink_acc_trgt.H4 !== undefined ? __ink_acc_trgt.H4 : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseHeader(nodeType, lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseHeader(nodeType, lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H5] || null : (__ink_acc_trgt.H5 !== undefined ? __ink_acc_trgt.H5 : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseHeader(nodeType, lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseHeader(nodeType, lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H6] || null : (__ink_acc_trgt.H6 !== undefined ? __ink_acc_trgt.H6 : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseHeader(nodeType, lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseHeader(nodeType, lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Quote] || null : (__ink_acc_trgt.Quote !== undefined ? __ink_acc_trgt.Quote : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseBlockQuote(lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseBlockQuote(lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Pre] || null : (__ink_acc_trgt.Pre !== undefined ? __ink_acc_trgt.Pre : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseCodeBlock(lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseCodeBlock(lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UList] || null : (__ink_acc_trgt.UList !== undefined ? __ink_acc_trgt.UList : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseList(lineReader, nodeType)) : (__ink_assgn_trgt[len(doc)]) = parseList(lineReader, nodeType); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OList] || null : (__ink_acc_trgt.OList !== undefined ? __ink_acc_trgt.OList : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseList(lineReader, nodeType)) : (__ink_assgn_trgt[len(doc)]) = parseList(lineReader, nodeType); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RawHTML] || null : (__ink_acc_trgt.RawHTML !== undefined ? __ink_acc_trgt.RawHTML : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseRawHTML(lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseRawHTML(lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[P] || null : (__ink_acc_trgt.P !== undefined ? __ink_acc_trgt.P : null)})()), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), parseParagraph(lineReader)) : (__ink_assgn_trgt[len(doc)]) = parseParagraph(lineReader); return __ink_assgn_trgt})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Hr] || null : (__ink_acc_trgt.Hr !== undefined ? __ink_acc_trgt.Hr : null)})()), () => ((() => { next(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(doc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(doc), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Hr] || null : (__ink_acc_trgt.Hr !== undefined ? __ink_acc_trgt.Hr : null)})()}) : (__ink_assgn_trgt[len(doc)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Hr] || null : (__ink_acc_trgt.Hr !== undefined ? __ink_acc_trgt.Hr : null)})()}; return __ink_assgn_trgt})()) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Empty] || null : (__ink_acc_trgt.Empty !== undefined ? __ink_acc_trgt.Empty : null)})()), () => ((() => { next(); return __ink_trampoline(__ink_trampolined_sub, doc) })())], [() => (__Ink_Empty), () => (doc)]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub, doc) })() })()([]) })();
parseHeader = (nodeType, lineReader) => (() => { let line; let reader; let text; line = (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})() })()(); reader = Reader(line); (() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntil] || null : (__ink_acc_trgt.readUntil !== undefined ? __ink_acc_trgt.readUntil : null)})() })()(__Ink_String(` `)); (() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})() })()(); text = (() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntilEnd] || null : (__ink_acc_trgt.readUntilEnd !== undefined ? __ink_acc_trgt.readUntilEnd : null)})() })()(); return {tag: nodeType, children: parseText(tokenizeText(text))} })();
parseBlockQuote = lineReader => (() => { let BlockQuotedLineReader; let next; let peek; peek = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); BlockQuotedLineReader = lineReader => (() => { let back; let expect__ink_qm__; let last; let next; let peek; let readUntil; let readUntilEnd; let readUntilMatchingDelim; let readUntilPrefix; let returnIfQuoted; returnIfQuoted = line => __ink_match(lineNodeType(line), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Quote] || null : (__ink_acc_trgt.Quote !== undefined ? __ink_acc_trgt.Quote : null)})()), () => (slice(line, 1, len(line)))], [() => (__Ink_Empty), () => (null)]]); peek = () => returnIfQuoted((() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})() })()()); last = () => returnIfQuoted((() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[last] || null : (__ink_acc_trgt.last !== undefined ? __ink_acc_trgt.last : null)})() })()()); back = () => (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[back] || null : (__ink_acc_trgt.back !== undefined ? __ink_acc_trgt.back : null)})() })()(); next = () => __ink_match(lineNodeType((() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})() })()()), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Quote] || null : (__ink_acc_trgt.Quote !== undefined ? __ink_acc_trgt.Quote : null)})()), () => (trimPrefix((() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})() })()(), __Ink_String(`>`)))], [() => (__Ink_Empty), () => (null)]]); expect__ink_qm__ = () => null; readUntil = c => (() => { let lines; lines = (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntil] || null : (__ink_acc_trgt.readUntil !== undefined ? __ink_acc_trgt.readUntil : null)})() })()(__as_ink_string(__Ink_String(`>`) + c)); return map(lines, line => slice(line, 1, len(line))) })(); readUntilPrefix = prefix => (() => { let lines; lines = (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntilPrefix] || null : (__ink_acc_trgt.readUntilPrefix !== undefined ? __ink_acc_trgt.readUntilPrefix : null)})() })()(__as_ink_string(__Ink_String(`>`) + c)); return map(lines, line => slice(line, 1, len(line))) })(); readUntilEnd = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntilEnd] || null : (__ink_acc_trgt.readUntilEnd !== undefined ? __ink_acc_trgt.readUntilEnd : null)})(); readUntilMatchingDelim = () => null; return {peek: peek, last: last, back: back, next: next, expect__ink_qm__: expect__ink_qm__, readUntil: readUntil, readUntilPrefix: readUntilPrefix, readUntilEnd: readUntilEnd, readUntilMatchingDelim: readUntilMatchingDelim} })(); return {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Quote] || null : (__ink_acc_trgt.Quote !== undefined ? __ink_acc_trgt.Quote : null)})(), children: parseDoc(BlockQuotedLineReader(lineReader, __Ink_String(`>`)))} })();
parseCodeBlock = lineReader => (() => { let children; let lang; let next; let peek; let startTag; peek = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); startTag = next(); lang = (() => { let rest; return __ink_match(rest = slice(startTag, 3, len(startTag)), [[() => (__Ink_String(``)), () => (__Ink_String(``))], [() => (__Ink_Empty), () => (rest)]]) })(); children = (() => { let __ink_trampolined_sub; let sub; return sub = lines => (() => { __ink_trampolined_sub = lines => __ink_match(lineNodeType(peek()), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Pre] || null : (__ink_acc_trgt.Pre !== undefined ? __ink_acc_trgt.Pre : null)})()), () => (lines)], [() => (null), () => (lines)], [() => (__Ink_Empty), () => ((() => { let text; text = next(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(lines); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(lines), text) : (__ink_assgn_trgt[len(lines)]) = text; return __ink_assgn_trgt})()) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, lines) })() })()([]); next(); return {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Pre] || null : (__ink_acc_trgt.Pre !== undefined ? __ink_acc_trgt.Pre : null)})(), children: [{tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Code] || null : (__ink_acc_trgt.Code !== undefined ? __ink_acc_trgt.Code : null)})(), lang: lang, children: unifyTextNodes(children, Newline)}]} })();
parseRawHTML = lineReader => (() => { let children; let firstLine; let next; let peek; let startMarkLine; peek = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); startMarkLine = next(); firstLine = slice(startMarkLine, len(__Ink_String(`!html `)), len(startMarkLine)); children = (() => { let __ink_trampolined_sub; let sub; return sub = lines => (() => { __ink_trampolined_sub = lines => __ink_match(lineNodeType(peek()), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Empty] || null : (__ink_acc_trgt.Empty !== undefined ? __ink_acc_trgt.Empty : null)})()), () => (lines)], [() => (null), () => (lines)], [() => (__Ink_Empty), () => ((() => { let text; text = next(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(lines); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(lines), text) : (__ink_assgn_trgt[len(lines)]) = text; return __ink_assgn_trgt})()) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, lines) })() })()([firstLine]); return {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RawHTML] || null : (__ink_acc_trgt.RawHTML !== undefined ? __ink_acc_trgt.RawHTML : null)})(), children: unifyTextNodes(children, Newline)} })();
parseList = (lineReader, listType) => (() => { let children; let next; let peek; peek = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); children = (() => { let __ink_trampolined_sub; let sub; return sub = items => (() => { __ink_trampolined_sub = items => __ink_match(listItemLine__ink_qm__(peek()), [[() => (false), () => (items)], [() => (__Ink_Empty), () => ((() => { let lastItem; let level; let line; let lineType; let listItem; let reader; let text; let trimmer; line = next(); lineType = lineNodeType(line); reader = Reader(line); trimmer = (() => { return __ink_match(lineType, [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UList] || null : (__ink_acc_trgt.UList !== undefined ? __ink_acc_trgt.UList : null)})()), () => (trimUListGetLevel)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OList] || null : (__ink_acc_trgt.OList !== undefined ? __ink_acc_trgt.OList : null)})()), () => (trimOListGetLevel)]]) })(); level = trimmer(reader); text = (() => { return (() => {let __ink_acc_trgt = __as_ink_string(reader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[readUntilEnd] || null : (__ink_acc_trgt.readUntilEnd !== undefined ? __ink_acc_trgt.readUntilEnd : null)})() })()(); listItem = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Item] || null : (__ink_acc_trgt.Item !== undefined ? __ink_acc_trgt.Item : null)})(), level: level, children: parseText(tokenizeText(text))}; return __ink_match(lastItem = (() => {let __ink_acc_trgt = __as_ink_string(items); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(items) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(items) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(items) - 1) })()] : null)})(), [[() => (null), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(items); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(items), listItem) : (__ink_assgn_trgt[len(items)]) = listItem; return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(lastItem); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[level] || null : (__ink_acc_trgt.level !== undefined ? __ink_acc_trgt.level : null)})(), [[() => (level), () => (__ink_match(lineType, [[() => (listType), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(items); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(items), listItem) : (__ink_assgn_trgt[len(items)]) = listItem; return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => ((() => { (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[back] || null : (__ink_acc_trgt.back !== undefined ? __ink_acc_trgt.back : null)})() })()(); return items })())]]))], [() => (__Ink_Empty), () => (__ink_match(((() => {let __ink_acc_trgt = __as_ink_string(lastItem); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[level] || null : (__ink_acc_trgt.level !== undefined ? __ink_acc_trgt.level : null)})() < level), [[() => (true), () => ((() => { let list; (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[back] || null : (__ink_acc_trgt.back !== undefined ? __ink_acc_trgt.back : null)})() })()(); list = parseList(lineReader, lineType); (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(lastItem); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(lastItem); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})()), list) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(lastItem); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})())]) = list; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, items) })())], [() => (__Ink_Empty), () => ((() => { (() => { return (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[back] || null : (__ink_acc_trgt.back !== undefined ? __ink_acc_trgt.back : null)})() })()(); return items })())]]))]]))]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, items) })() })()([]); children = map(children, child => __ink_match(child, [[() => ({tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Item] || null : (__ink_acc_trgt.Item !== undefined ? __ink_acc_trgt.Item : null)})(), level: __Ink_Empty, children: __Ink_Empty}), () => ({tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Item] || null : (__ink_acc_trgt.Item !== undefined ? __ink_acc_trgt.Item : null)})(), children: (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})()})], [() => (__Ink_Empty), () => (child)]])); return {tag: listType, children: children} })();
parseParagraph = lineReader => (() => { let children; let next; let peek; peek = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[peek] || null : (__ink_acc_trgt.peek !== undefined ? __ink_acc_trgt.peek : null)})(); next = (() => {let __ink_acc_trgt = __as_ink_string(lineReader); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})(); children = (() => { let __ink_trampolined_sub; let sub; return sub = lines => (() => { __ink_trampolined_sub = lines => __ink_match(lineNodeType(peek()), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[P] || null : (__ink_acc_trgt.P !== undefined ? __ink_acc_trgt.P : null)})()), () => ((() => { let text; text = next(); return __ink_match([hasSuffix__ink_qm__(text, __Ink_String(`  `)), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(text); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(text) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(text) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(text) - 1) })()] : null)})(), __Ink_String(`\\`))], [[() => ([true, __Ink_Empty]), () => ((() => { append(lines, parseText(tokenizeText(slice(text, 0, (len(text) - 2))))); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(lines); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(lines), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Br] || null : (__ink_acc_trgt.Br !== undefined ? __ink_acc_trgt.Br : null)})()}) : (__ink_assgn_trgt[len(lines)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Br] || null : (__ink_acc_trgt.Br !== undefined ? __ink_acc_trgt.Br : null)})()}; return __ink_assgn_trgt})()) })())], [() => ([__Ink_Empty, true]), () => ((() => { append(lines, parseText(tokenizeText(slice(text, 0, (len(text) - 1))))); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(lines); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(lines), {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Br] || null : (__ink_acc_trgt.Br !== undefined ? __ink_acc_trgt.Br : null)})()}) : (__ink_assgn_trgt[len(lines)]) = {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Br] || null : (__ink_acc_trgt.Br !== undefined ? __ink_acc_trgt.Br : null)})()}; return __ink_assgn_trgt})()) })())], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, append(lines, parseText(tokenizeText(text)))))]]) })())], [() => (__Ink_Empty), () => (lines)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, lines) })() })()([]); return {tag: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[P] || null : (__ink_acc_trgt.P !== undefined ? __ink_acc_trgt.P : null)})(), children: unifyTextNodes(children, __Ink_String(` `))} })();
compile = nodes => cat(map(nodes, compileNode), __Ink_String(``));
wrapTag = (tag, node) => f(__Ink_String(`<{{0}}>{{1}}</{{0}}>`), [tag, compile((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})())]);
compileNode = node => __ink_match(type(node), [[() => (__Ink_String(`string`)), () => (replace(replace(node, __Ink_String(`&`), __Ink_String(`&amp;`)), __Ink_String(`<`), __Ink_String(`&lt;`)))], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tag] || null : (__ink_acc_trgt.tag !== undefined ? __ink_acc_trgt.tag : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[P] || null : (__ink_acc_trgt.P !== undefined ? __ink_acc_trgt.P : null)})()), () => (wrapTag(__Ink_String(`p`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Em] || null : (__ink_acc_trgt.Em !== undefined ? __ink_acc_trgt.Em : null)})()), () => (wrapTag(__Ink_String(`em`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Strong] || null : (__ink_acc_trgt.Strong !== undefined ? __ink_acc_trgt.Strong : null)})()), () => (wrapTag(__Ink_String(`strong`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Strike] || null : (__ink_acc_trgt.Strike !== undefined ? __ink_acc_trgt.Strike : null)})()), () => (wrapTag(__Ink_String(`strike`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[A] || null : (__ink_acc_trgt.A !== undefined ? __ink_acc_trgt.A : null)})()), () => (f(__Ink_String(`<a href="{{0}}">{{1}}</a>`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[href] || null : (__ink_acc_trgt.href !== undefined ? __ink_acc_trgt.href : null)})(), compile((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H1] || null : (__ink_acc_trgt.H1 !== undefined ? __ink_acc_trgt.H1 : null)})()), () => (wrapTag(__Ink_String(`h1`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H2] || null : (__ink_acc_trgt.H2 !== undefined ? __ink_acc_trgt.H2 : null)})()), () => (wrapTag(__Ink_String(`h2`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H3] || null : (__ink_acc_trgt.H3 !== undefined ? __ink_acc_trgt.H3 : null)})()), () => (wrapTag(__Ink_String(`h3`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H4] || null : (__ink_acc_trgt.H4 !== undefined ? __ink_acc_trgt.H4 : null)})()), () => (wrapTag(__Ink_String(`h4`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H5] || null : (__ink_acc_trgt.H5 !== undefined ? __ink_acc_trgt.H5 : null)})()), () => (wrapTag(__Ink_String(`h5`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[H6] || null : (__ink_acc_trgt.H6 !== undefined ? __ink_acc_trgt.H6 : null)})()), () => (wrapTag(__Ink_String(`h6`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Quote] || null : (__ink_acc_trgt.Quote !== undefined ? __ink_acc_trgt.Quote : null)})()), () => (wrapTag(__Ink_String(`blockquote`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Img] || null : (__ink_acc_trgt.Img !== undefined ? __ink_acc_trgt.Img : null)})()), () => (f(__Ink_String(`<img alt="{{0}}" src="{{1}}"/>`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[alt] || null : (__ink_acc_trgt.alt !== undefined ? __ink_acc_trgt.alt : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[src] || null : (__ink_acc_trgt.src !== undefined ? __ink_acc_trgt.src : null)})()]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Pre] || null : (__ink_acc_trgt.Pre !== undefined ? __ink_acc_trgt.Pre : null)})()), () => (wrapTag(__Ink_String(`pre`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Code] || null : (__ink_acc_trgt.Code !== undefined ? __ink_acc_trgt.Code : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[lang] || null : (__ink_acc_trgt.lang !== undefined ? __ink_acc_trgt.lang : null)})(), [[() => (__Ink_String(``)), () => (wrapTag(__Ink_String(`code`), node))], [() => (null), () => (wrapTag(__Ink_String(`code`), node))], [() => (__Ink_Empty), () => (f(__Ink_String(`<code data-lang="{{0}}">{{1}}</code>`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[lang] || null : (__ink_acc_trgt.lang !== undefined ? __ink_acc_trgt.lang : null)})(), compile((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})())]))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UList] || null : (__ink_acc_trgt.UList !== undefined ? __ink_acc_trgt.UList : null)})()), () => (wrapTag(__Ink_String(`ul`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OList] || null : (__ink_acc_trgt.OList !== undefined ? __ink_acc_trgt.OList : null)})()), () => (wrapTag(__Ink_String(`ol`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Item] || null : (__ink_acc_trgt.Item !== undefined ? __ink_acc_trgt.Item : null)})()), () => (wrapTag(__Ink_String(`li`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Checkbox] || null : (__ink_acc_trgt.Checkbox !== undefined ? __ink_acc_trgt.Checkbox : null)})()), () => (f(__Ink_String(`<input type="checkbox" {{0}} />`), [__ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[checked] || null : (__ink_acc_trgt.checked !== undefined ? __ink_acc_trgt.checked : null)})(), [[() => (true), () => (__Ink_String(`checked`))], [() => (__Ink_Empty), () => (__Ink_String(``))]])]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Br] || null : (__ink_acc_trgt.Br !== undefined ? __ink_acc_trgt.Br : null)})()), () => (__Ink_String(`<br/>`))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Hr] || null : (__ink_acc_trgt.Hr !== undefined ? __ink_acc_trgt.Hr : null)})()), () => (__Ink_String(`<hr/>`))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RawHTML] || null : (__ink_acc_trgt.RawHTML !== undefined ? __ink_acc_trgt.RawHTML : null)})()), () => ((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[children] || null : (__ink_acc_trgt.children !== undefined ? __ink_acc_trgt.children : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())], [() => (__Ink_Empty), () => (f(__Ink_String(`<span style="color:red">Unknown Markdown node {{0}}</span>`), [string(node)]))]]))]]);
transform = text => compile(parse(text))

str = s => bind(s, __Ink_String(`valueOf`))(s);
arr = bind(Object, __Ink_String(`values`));
hae = (tag, classList, attrs, events, children) => ({tag: str(tag), attrs: (() => {let __ink_assgn_trgt = __as_ink_string(attrs); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return __Ink_String(`class`) })(), arr(map(classList, str))) : (__ink_assgn_trgt[(() => { return __Ink_String(`class`) })()]) = arr(map(classList, str)); return __ink_assgn_trgt})(), events: events, children: arr(map(children, child => __ink_match(type(child), [[() => (__Ink_String(`string`)), () => (str(child))], [() => (__Ink_Empty), () => (child)]])))});
ha = (tag, classList, attrs, children) => hae(tag, classList, attrs, {}, children);
h = (tag, classList, children) => hae(tag, classList, {}, {}, children);
Renderer = root => (() => { let InitialDom; let node; let render; let self; render = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Torus] || null : (__ink_acc_trgt.Torus !== undefined ? __ink_acc_trgt.Torus : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})(); InitialDom = h(__Ink_String(`div`), [], []); node = render(null, null, InitialDom); bind(root, __Ink_String(`appendChild`))(node); return self = {node: node, prev: InitialDom, update: jdom => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(node, render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom)) : (__ink_assgn_trgt.node) = render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(prev, jdom) : (__ink_assgn_trgt.prev) = jdom; return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})() })()} })()

PersistenceDelay = 1000;
Mobile__ink_qm__ = ((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[innerWidth] || null : (__ink_acc_trgt.innerWidth !== undefined ? __ink_acc_trgt.innerWidth : null)})() < 600);
Touch__ink_qm__ = ((() => {let __ink_acc_trgt = __as_ink_string(navigator); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[maxTouchPoints] || null : (__ink_acc_trgt.maxTouchPoints !== undefined ? __ink_acc_trgt.maxTouchPoints : null)})() > 0);
Tab = char(9);
Newline = char(10);
navigate = url => bind((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[history] || null : (__ink_acc_trgt.history !== undefined ? __ink_acc_trgt.history : null)})(), __Ink_String(`pushState`))((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[title] || null : (__ink_acc_trgt.title !== undefined ? __ink_acc_trgt.title : null)})(), null, url);
inRange__ink_qm__ = (min, max, val) => __ink_and((min < val), (val < max));
matchScrollProgress = (from, to) => (() => { let desiredScrollTop; let fromRect; let scrollPercent; let toRect; fromRect = bind(from, __Ink_String(`getBoundingClientRect`))(); scrollPercent = ((() => {let __ink_acc_trgt = __as_ink_string(from); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[scrollTop] || null : (__ink_acc_trgt.scrollTop !== undefined ? __ink_acc_trgt.scrollTop : null)})() / (() => { return ((() => {let __ink_acc_trgt = __as_ink_string(from); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[scrollHeight] || null : (__ink_acc_trgt.scrollHeight !== undefined ? __ink_acc_trgt.scrollHeight : null)})() - (() => {let __ink_acc_trgt = __as_ink_string(fromRect); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[height] || null : (__ink_acc_trgt.height !== undefined ? __ink_acc_trgt.height : null)})()) })()); toRect = bind(to, __Ink_String(`getBoundingClientRect`))(); desiredScrollTop = ((() => { return ((() => {let __ink_acc_trgt = __as_ink_string(to); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[scrollHeight] || null : (__ink_acc_trgt.scrollHeight !== undefined ? __ink_acc_trgt.scrollHeight : null)})() - (() => {let __ink_acc_trgt = __as_ink_string(toRect); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[height] || null : (__ink_acc_trgt.height !== undefined ? __ink_acc_trgt.height : null)})()) })() * scrollPercent); return __ink_match(inRange__ink_qm__((desiredScrollTop - 2), __as_ink_string(desiredScrollTop + 2), (() => {let __ink_acc_trgt = __as_ink_string(to); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[scrollTop] || null : (__ink_acc_trgt.scrollTop !== undefined ? __ink_acc_trgt.scrollTop : null)})()), [[() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(to); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(scrollTop, desiredScrollTop) : (__ink_assgn_trgt.scrollTop) = desiredScrollTop; return __ink_assgn_trgt})())]]) })();
withPersistedFetch = (url, opts, cb) => (() => { let payload; let req; (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(loading__ink_qm__, true) : (__ink_assgn_trgt.loading__ink_qm__) = true; return __ink_assgn_trgt})(); render(); req = fetch(url, opts); payload = bind(req, __Ink_String(`then`))(resp => bind(resp, __Ink_String(`text`))()); return bind(payload, __Ink_String(`then`))(data => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(loading__ink_qm__, false) : (__ink_assgn_trgt.loading__ink_qm__) = false; return __ink_assgn_trgt})(); render(); return cb(data) })()) })();
getItem = bind(localStorage, __Ink_String(`getItem`));
setItem = bind(localStorage, __Ink_String(`setItem`));
removeItem = bind(localStorage, __Ink_String(`removeItem`));
withLocalFetch = (url, opts, cb) => __ink_match(url, [[() => (__Ink_String(`/doc/`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(opts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[method] || null : (__ink_acc_trgt.method !== undefined ? __ink_acc_trgt.method : null)})(), [[() => (null), () => (cb(getItem(__Ink_String(`files`))))], [() => (__Ink_String(`GET`)), () => (cb(getItem(__Ink_String(`files`))))], [() => (__Ink_Empty), () => (bind(console, __Ink_String(`warn`))(bind(__Ink_String(`Invalid request`), __Ink_String(`valueOf`))(), bind(url, __Ink_String(`valueOf`))(), opts))]]))], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(opts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[method] || null : (__ink_acc_trgt.method !== undefined ? __ink_acc_trgt.method : null)})(), [[() => (null), () => (cb(getItem(url)))], [() => (__Ink_String(`GET`)), () => (cb(getItem(url)))], [() => (__Ink_String(`PUT`)), () => ((() => { let fileName; let files; files = filter(split(getItem(__Ink_String(`files`)), Newline), s => (len(s) > 0)); fileName = (() => { let urlParts; urlParts = split(url, __Ink_String(`/`)); return (() => {let __ink_acc_trgt = __as_ink_string(urlParts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(urlParts) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(urlParts) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(urlParts) - 1) })()] : null)})() })(); (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (__ink_negate(1)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(files); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(files), fileName) : (__ink_assgn_trgt[len(files)]) = fileName; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(files); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), [[() => (fileName), () => (null)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (i - 1)))]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(len(files)); sort__ink_em__(files); setItem(__Ink_String(`files`), cat(files, Newline)); setItem(url, (() => {let __ink_acc_trgt = __as_ink_string(opts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return cb(__Ink_String(``)) })())], [() => (__Ink_String(`DELETE`)), () => ((() => { let fileName; let files; fileName = (() => { let urlParts; urlParts = split(url, __Ink_String(`/`)); return (() => {let __ink_acc_trgt = __as_ink_string(urlParts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(urlParts) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(urlParts) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(urlParts) - 1) })()] : null)})() })(); files = filter(split(getItem(__Ink_String(`files`)), Newline), s => (len(s) > 0)); files = filter(files, s => __ink_negate((() => { return __ink_eq(s, fileName) })())); setItem(__Ink_String(`files`), cat(files, Newline)); removeItem(url, (() => {let __ink_acc_trgt = __as_ink_string(opts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return cb(__Ink_String(``)) })())], [() => (__Ink_Empty), () => (bind(console, __Ink_String(`warn`))(bind(__Ink_String(`Invalid request`), __Ink_String(`valueOf`))(), bind(url, __Ink_String(`valueOf`))(), opts))]]))]]);
withFetch = (() => { return __ink_match(Authed__ink_qm__, [[() => (true), () => (withPersistedFetch)], [() => (__Ink_Empty), () => ((() => { __ink_match(getItem(__Ink_String(`files`)), [[() => (null), () => (setItem(__Ink_String(`files`), __Ink_String(``)))]]); return withLocalFetch })())]]) })();
prompt = (str, confirmText, inputValid__ink_qm__, withResp) => (() => { let S; let callback; let handleKeys; let input; let r; let render; let update; r = Renderer((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})(); S = {el: null, fileName: __Ink_String(``), validInput__ink_qm__: inputValid__ink_qm__(__Ink_String(``))}; render = () => (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(el, update(h(__Ink_String(`div`), [__Ink_String(`modal-wrapper`)], [h(__Ink_String(`div`), [__Ink_String(`modal`), __Ink_String(`modal-prompt`)], [h(__Ink_String(`div`), [__Ink_String(`modal-title`)], [str]), hae(__Ink_String(`input`), [__Ink_String(`modal-input`)], {}, {input: evt => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(fileName, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.fileName) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(validInput__ink_qm__, inputValid__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})())) : (__ink_assgn_trgt.validInput__ink_qm__) = inputValid__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})()); return __ink_assgn_trgt})(); return render() })()}, []), __ink_match(__ink_or((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[validInput__ink_qm__] || null : (__ink_acc_trgt.validInput__ink_qm__ !== undefined ? __ink_acc_trgt.validInput__ink_qm__ : null)})(), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})(), __Ink_String(``))), [[() => (false), () => (h(__Ink_String(`div`), [__Ink_String(`modal-warning`)], [f(__Ink_String(`A file called "{{0}}" already exists.`), [(() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})()])]))]]), h(__Ink_String(`div`), [__Ink_String(`modal-buttons`)], [hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`okButton`)], {disabled: __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[validInput__ink_qm__] || null : (__ink_acc_trgt.validInput__ink_qm__ !== undefined ? __ink_acc_trgt.validInput__ink_qm__ : null)})() })())}, {click: () => callback((() => {let __ink_acc_trgt = __as_ink_string(input); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})())}, [confirmText]), hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`cancelButton`)], {}, {click: () => callback(null)}, [__Ink_String(`Cancel`)])])])]))) : (__ink_assgn_trgt.el) = update(h(__Ink_String(`div`), [__Ink_String(`modal-wrapper`)], [h(__Ink_String(`div`), [__Ink_String(`modal`), __Ink_String(`modal-prompt`)], [h(__Ink_String(`div`), [__Ink_String(`modal-title`)], [str]), hae(__Ink_String(`input`), [__Ink_String(`modal-input`)], {}, {input: evt => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(fileName, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.fileName) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(validInput__ink_qm__, inputValid__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})())) : (__ink_assgn_trgt.validInput__ink_qm__) = inputValid__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})()); return __ink_assgn_trgt})(); return render() })()}, []), __ink_match(__ink_or((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[validInput__ink_qm__] || null : (__ink_acc_trgt.validInput__ink_qm__ !== undefined ? __ink_acc_trgt.validInput__ink_qm__ : null)})(), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})(), __Ink_String(``))), [[() => (false), () => (h(__Ink_String(`div`), [__Ink_String(`modal-warning`)], [f(__Ink_String(`A file called "{{0}}" already exists.`), [(() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fileName] || null : (__ink_acc_trgt.fileName !== undefined ? __ink_acc_trgt.fileName : null)})()])]))]]), h(__Ink_String(`div`), [__Ink_String(`modal-buttons`)], [hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`okButton`)], {disabled: __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[validInput__ink_qm__] || null : (__ink_acc_trgt.validInput__ink_qm__ !== undefined ? __ink_acc_trgt.validInput__ink_qm__ : null)})() })())}, {click: () => callback((() => {let __ink_acc_trgt = __as_ink_string(input); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})())}, [confirmText]), hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`cancelButton`)], {}, {click: () => callback(null)}, [__Ink_String(`Cancel`)])])])])); return __ink_assgn_trgt})(); render(); handleKeys = evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => (__Ink_String(`Enter`)), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[validInput__ink_qm__] || null : (__ink_acc_trgt.validInput__ink_qm__ !== undefined ? __ink_acc_trgt.validInput__ink_qm__ : null)})(), [[() => (true), () => (callback((() => {let __ink_acc_trgt = __as_ink_string(input); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()))]]) })())], [() => (__Ink_String(`Escape`)), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return callback(null) })())]]); input = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.modal-input`)); bind(input, __Ink_String(`focus`))(); bind(document, __Ink_String(`addEventListener`))(__Ink_String(`keydown`), handleKeys); return callback = s => (() => { bind((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})(), __Ink_String(`removeChild`))((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[el] || null : (__ink_acc_trgt.el !== undefined ? __ink_acc_trgt.el : null)})()); bind(document, __Ink_String(`removeEventListener`))(__Ink_String(`keydown`), handleKeys); return withResp(s) })() })();
confirm = (str, withResp) => (() => { let callback; let el; let handleKeys; let input; let r; let update; r = Renderer((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})(); el = update(h(__Ink_String(`div`), [__Ink_String(`modal-wrapper`)], [h(__Ink_String(`div`), [__Ink_String(`modal`), __Ink_String(`modal-prompt`)], [h(__Ink_String(`div`), [__Ink_String(`modal-title`)], [str]), h(__Ink_String(`div`), [__Ink_String(`modal-buttons`)], [hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`okButton`)], {}, {click: () => callback(true)}, [__Ink_String(`Ok`)]), hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`cancelButton`)], {}, {click: () => callback(false)}, [__Ink_String(`Cancel`)])])])])); input = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.cancelButton`)); bind(input, __Ink_String(`focus`))(); handleKeys = evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => (__Ink_String(`Enter`)), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return callback(true) })())], [() => (__Ink_String(`Escape`)), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return callback(false) })())]]); bind(document, __Ink_String(`addEventListener`))(__Ink_String(`keydown`), handleKeys); return callback = resp => (() => { bind((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})(), __Ink_String(`removeChild`))(el); bind(document, __Ink_String(`removeEventListener`))(__Ink_String(`keydown`), handleKeys); return withResp(resp) })() })();
delay = (fn, timeout) => (() => { let S; let dateNow; S = {to: null}; dateNow = bind(Date, __Ink_String(`now`)); return (a, b) => (() => { clearTimeout((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[to] || null : (__ink_acc_trgt.to !== undefined ? __ink_acc_trgt.to : null)})()); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(to, setTimeout(() => fn(a, b), timeout)) : (__ink_assgn_trgt.to) = setTimeout(() => fn(a, b), timeout); return __ink_assgn_trgt})() })() })();
Link = (name, href) => ha(__Ink_String(`a`), [], {href: href, target: __Ink_String(`_blank`)}, name);
Header = () => h(__Ink_String(`header`), [], [h(__Ink_String(`div`), [__Ink_String(`header-left`)], [hae(__Ink_String(`button`), [__Ink_String(`icon`), __Ink_String(`button`), __Ink_String(`toggleSidebar`), __Ink_String(`tooltip-right`)], {title: __Ink_String(`Toggle sidebar`)}, {click: () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(sidebar__ink_qm__, __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })())) : (__ink_assgn_trgt.sidebar__ink_qm__) = __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })()); return __ink_assgn_trgt})())}, [__Ink_String(`☰`)]), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[loading__ink_qm__] || null : (__ink_acc_trgt.loading__ink_qm__ !== undefined ? __ink_acc_trgt.loading__ink_qm__ : null)})(), [[() => (true), () => (h(__Ink_String(`div`), [__Ink_String(`loading`)], []))], [() => (__Ink_Empty), () => (h(__Ink_String(`h1`), [], [__Ink_String(`Merlot.`)]))]]), hae(__Ink_String(`button`), [__Ink_String(`icon`), __Ink_String(`button`), __Ink_String(`addFile`)], {title: __Ink_String(`Add a file`)}, {click: addFile}, [__Ink_String(`+`)])]), h(__Ink_String(`nav`), [], [hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`tooltip-left`)], {title: __Ink_String(`Change color scheme`)}, {click: () => toggleColorScheme()}, [__ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[colorScheme] || null : (__ink_acc_trgt.colorScheme !== undefined ? __ink_acc_trgt.colorScheme : null)})(), [[() => (__Ink_String(`light`)), () => (__Ink_String(`☽`))], [() => (__Ink_String(`dark`)), () => (__Ink_String(`☉`))]])]), __ink_match(Authed__ink_qm__, [[() => (false), () => (null)], [() => (__Ink_Empty), () => (ha(__Ink_String(`a`), [__Ink_String(`button`), __Ink_String(`tooltip-left`)], {href: f(__Ink_String(`/view/{{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})()]), target: __Ink_String(`_blank`), title: __Ink_String(`Open a preview in its own tab`)}, [__Ink_String(`Share`)]))]]), hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`tooltip-left`)], {title: __Ink_String(`Change editor mode`)}, {click: toggleMode}, [__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[mode] || null : (__ink_acc_trgt.mode !== undefined ? __ink_acc_trgt.mode : null)})(), [[() => (__Ink_String(`edit`)), () => (__Ink_String(`Preview`))], [() => (__Ink_String(`preview`)), () => (__Ink_String(`Full`))], [() => (__Ink_String(`both`)), () => (__Ink_String(`Editor`))]])])])]);
FileItem = (file, active__ink_qm__) => h(__Ink_String(`div`), [__Ink_String(`file-item`), __ink_match(active__ink_qm__, [[() => (true), () => (__Ink_String(`active`))], [() => (__Ink_Empty), () => (__Ink_String(``))]])], [hae(__Ink_String(`a`), [], {href: f(__Ink_String(`/{{0}}`), [file])}, {click: evt => __ink_match(__ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[metaKey] || null : (__ink_acc_trgt.metaKey !== undefined ? __ink_acc_trgt.metaKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})()), [[() => (true), () => (null)], [() => (__Ink_Empty), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); __ink_match(((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[innerWidth] || null : (__ink_acc_trgt.innerWidth !== undefined ? __ink_acc_trgt.innerWidth : null)})() < 600), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(sidebar__ink_qm__, false) : (__ink_assgn_trgt.sidebar__ink_qm__) = false; return __ink_assgn_trgt})())]]); return setActive(file) })())]])}, [file]), hae(__Ink_String(`button`), [__Ink_String(`button`), __Ink_String(`deleteFile`), __Ink_String(`tooltip-left`)], {title: __Ink_String(`Delete this file`)}, {click: () => confirm(f(__Ink_String(`Delete "{{0}}" forever?`), [file]), resp => __ink_match(resp, [[() => (true), () => (withFetch(__as_ink_string(__Ink_String(`/doc/`) + file), {method: __Ink_String(`DELETE`)}, () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(files, filter((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})(), f => __ink_negate((() => { return __ink_eq(f, file) })()))) : (__ink_assgn_trgt.files) = filter((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})(), f => __ink_negate((() => { return __ink_eq(f, file) })())); return __ink_assgn_trgt})(); setDefaultActiveFile(); return render() })()))], [() => (__Ink_Empty), () => (null)]]))}, [__Ink_String(`×`)])]);
Sidebar = () => (() => { let children; let items; children = []; items = map((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})(), file => FileItem(file, __ink_eq(file, (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})()))); return h(__Ink_String(`div`), [__Ink_String(`sidebar`), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})(), [[() => (true), () => (__Ink_String(`show`))], [() => (__Ink_Empty), () => (__Ink_String(`hide`))]])], [h(__Ink_String(`div`), [__Ink_String(`file-list`)], items), h(__Ink_String(`footer`), [], [h(__Ink_String(`p`), [], [Link(__Ink_String(`Merlot`), __Ink_String(`https://github.com/thesephist/merlot`)), __Ink_String(` is a project by `), Link(__Ink_String(`Linus`), __Ink_String(`https://thesephist.com/`)), __Ink_String(` built with `), Link(__Ink_String(`Ink`), __Ink_String(`https://dotink.co/`)), __Ink_String(` and `), Link(__Ink_String(`Torus`), __Ink_String(`https://github.com/thesephist/torus`)), __Ink_String(`.`)])]), hae(__Ink_String(`div`), [__Ink_String(`sidebar-shade`)], {}, {click: () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(sidebar__ink_qm__, __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })())) : (__ink_assgn_trgt.sidebar__ink_qm__) = __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })()); return __ink_assgn_trgt})())}, [])]) })();
handleEditorInput = delay((name, content) => (() => { render(); return persistImmediately(name, content) })(), PersistenceDelay);
Editor = () => (() => { let handleInput; let markupSection; let readOnly__ink_qm__; readOnly__ink_qm__ = __ink_or((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[stale__ink_qm__] || null : (__ink_acc_trgt.stale__ink_qm__ !== undefined ? __ink_acc_trgt.stale__ink_qm__ : null)})(), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})(), null)); handleInput = evt => __ink_match(readOnly__ink_qm__, [[() => (true), () => (render())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(content, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.content) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); return handleEditorInput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})()) })())]]); markupSection = (evt, mark) => (() => { let end; let start; bind(evt, __Ink_String(`preventDefault`))(); start = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[selectionStart] || null : (__ink_acc_trgt.selectionStart !== undefined ? __ink_acc_trgt.selectionStart : null)})(); end = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[selectionEnd] || null : (__ink_acc_trgt.selectionEnd !== undefined ? __ink_acc_trgt.selectionEnd : null)})(); return __ink_match([start, end], [[() => ([null, null]), () => (null)], [() => (__Ink_Empty), () => ((() => { let back; let front; let middle; let val; val = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); front = slice(val, 0, start); middle = slice(val, start, end); back = slice(val, end, len(val)); __ink_match(__ink_and(hasSuffix__ink_qm__(front, mark), hasPrefix__ink_qm__(back, mark)), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(value, __as_ink_string(__as_ink_string(slice(front, 0, (len(front) - len(mark))) + middle) + slice(back, len(mark), len(back)))) : (__ink_assgn_trgt.value) = __as_ink_string(__as_ink_string(slice(front, 0, (len(front) - len(mark))) + middle) + slice(back, len(mark), len(back))); return __ink_assgn_trgt})(); return bind((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), __Ink_String(`setSelectionRange`))((start - len(mark)), (end - len(mark))) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(value, __as_ink_string(__as_ink_string(__as_ink_string(__as_ink_string(front + mark) + middle) + mark) + back)) : (__ink_assgn_trgt.value) = __as_ink_string(__as_ink_string(__as_ink_string(__as_ink_string(front + mark) + middle) + mark) + back); return __ink_assgn_trgt})(); return bind((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), __Ink_String(`setSelectionRange`))(__as_ink_string(start + len(mark)), __as_ink_string(end + len(mark))) })())]]); return handleInput(evt) })())]]) })(); return h(__Ink_String(`div`), [__Ink_String(`editor`)], [hae(__Ink_String(`textarea`), [__Ink_String(`editor-textarea`), __ink_match(readOnly__ink_qm__, [[() => (true), () => (__Ink_String(`readonly`))], [() => (__Ink_Empty), () => (__Ink_String(``))]])], {placeholder: __ink_match(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})()), [[() => (0), () => (__Ink_String(`Create a new file to start writing.`))], [() => (__Ink_Empty), () => (__Ink_String(`Say something...`))]]), value: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})(), autofocus: true, disabled: __ink_eq(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})()), 0)}, {input: handleInput, keydown: evt => __ink_match([(() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), __ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[metaKey] || null : (__ink_acc_trgt.metaKey !== undefined ? __ink_acc_trgt.metaKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})())], [[() => ([__Ink_String(`Tab`), false]), () => ((() => { let idx; bind(evt, __Ink_String(`preventDefault`))(); return __ink_match(idx = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[selectionStart] || null : (__ink_acc_trgt.selectionStart !== undefined ? __ink_acc_trgt.selectionStart : null)})(), [[() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { let back; let front; let val; val = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); front = slice(val, 0, idx); back = slice(val, idx, len(val)); (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(value, __as_ink_string(__as_ink_string(front + Tab) + back)) : (__ink_assgn_trgt.value) = __as_ink_string(__as_ink_string(front + Tab) + back); return __ink_assgn_trgt})(); bind((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), __Ink_String(`setSelectionRange`))(__as_ink_string(idx + 1), __as_ink_string(idx + 1)); return handleInput(evt) })())]]) })())], [() => ([__Ink_String(`b`), true]), () => (markupSection(evt, __Ink_String(`**`)))], [() => ([__Ink_String(`i`), true]), () => (markupSection(evt, __Ink_String(`_`)))]]), scroll: evt => (() => { let preview; return __ink_match(preview = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.preview`)), [[() => (null), () => (null)], [() => (__Ink_Empty), () => (matchScrollProgress((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), preview))]]) })()}, [])]) })();
PreviewCache = {content: null, preview: null};
Preview = () => hae(__Ink_String(`div`), [__Ink_String(`preview`)], {}, {scroll: evt => (() => { let editor; return __ink_match(editor = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.editor-textarea`)), [[() => (null), () => (null)], [() => (__Ink_Empty), () => (matchScrollProgress((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), editor))]]) })()}, [__ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(PreviewCache); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})()), () => ((() => {let __ink_acc_trgt = __as_ink_string(PreviewCache); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[preview] || null : (__ink_acc_trgt.preview !== undefined ? __ink_acc_trgt.preview : null)})())], [() => (__Ink_Empty), () => ((() => { let div; div = bind(document, __Ink_String(`createElement`))(__Ink_String(`div`)); bind((() => {let __ink_acc_trgt = __as_ink_string(div); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[classList] || null : (__ink_acc_trgt.classList !== undefined ? __ink_acc_trgt.classList : null)})(), __Ink_String(`add`))(__Ink_String(`preview-content`)); (() => {let __ink_assgn_trgt = __as_ink_string(div); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(innerHTML, transform((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})())) : (__ink_assgn_trgt.innerHTML) = transform((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(div); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(onclick, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tagName] || null : (__ink_acc_trgt.tagName !== undefined ? __ink_acc_trgt.tagName : null)})(), [[() => (__Ink_String(`INPUT`)), () => (bind(evt, __Ink_String(`preventDefault`))())]])) : (__ink_assgn_trgt.onclick) = evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tagName] || null : (__ink_acc_trgt.tagName !== undefined ? __ink_acc_trgt.tagName : null)})(), [[() => (__Ink_String(`INPUT`)), () => (bind(evt, __Ink_String(`preventDefault`))())]]); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(PreviewCache); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(content, (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})()) : (__ink_assgn_trgt.content) = (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[content] || null : (__ink_acc_trgt.content !== undefined ? __ink_acc_trgt.content : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(PreviewCache); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(preview, div) : (__ink_assgn_trgt.preview) = div; return __ink_assgn_trgt})(); return div })())]])]);
DefaultMode = () => __ink_match(Mobile__ink_qm__, [[() => (true), () => (__Ink_String(`edit`))], [() => (__Ink_Empty), () => (__Ink_String(`both`))]]);
State = {sidebar__ink_qm__: __ink_match(Mobile__ink_qm__, [[() => (true), () => (false)], [() => (__Ink_Empty), () => (true)]]), loading__ink_qm__: false, stale__ink_qm__: false, files: [], activeFile: null, content: __Ink_String(``), colorScheme: __ink_match(bind(localStorage, __Ink_String(`getItem`))(__Ink_String(`colorScheme`)), [[() => (__Ink_String(`dark`)), () => (__Ink_String(`dark`))], [() => (__Ink_Empty), () => (__Ink_String(`light`))]]), editor: {mode: DefaultMode()}};
setActive = file => (() => { navigate(f(__Ink_String(`/{{0}}`), [file])); (() => {let __ink_assgn_trgt = __as_ink_string(document); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(title, f(__Ink_String(`{{0}} | Merlot`), [file])) : (__ink_assgn_trgt.title) = f(__Ink_String(`{{0}} | Merlot`), [file]); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(stale__ink_qm__, true) : (__ink_assgn_trgt.stale__ink_qm__) = true; return __ink_assgn_trgt})(); render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(activeFile, file) : (__ink_assgn_trgt.activeFile) = file; return __ink_assgn_trgt})()); return withFetch(f(__Ink_String(`/doc/{{0}}`), [file]), {}, data => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(stale__ink_qm__, false) : (__ink_assgn_trgt.stale__ink_qm__) = false; return __ink_assgn_trgt})(); render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(content, data) : (__ink_assgn_trgt.content) = data; return __ink_assgn_trgt})()); return requestAnimationFrame(() => requestAnimationFrame(() => (() => { let textarea; return __ink_match(textarea = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.editor-textarea`)), [[() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { bind(textarea, __Ink_String(`setSelectionRange`))(0, 0); return (() => {let __ink_assgn_trgt = __as_ink_string(textarea); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(scrollTop, 0) : (__ink_assgn_trgt.scrollTop) = 0; return __ink_assgn_trgt})() })())]]) })())) })()) })();
persistImmediately = (name, content) => withFetch(f(__Ink_String(`/doc/{{0}}`), [name]), {method: __Ink_String(`PUT`), body: content}, () => null);
persist = delay(persistImmediately, PersistenceDelay);
root = bind(document, __Ink_String(`querySelector`))(__Ink_String(`#root`));
r = Renderer(root);
update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})();
toggleMode = () => render((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(mode, (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[mode] || null : (__ink_acc_trgt.mode !== undefined ? __ink_acc_trgt.mode : null)})(), [[() => (__Ink_String(`edit`)), () => (__Ink_String(`preview`))], [() => (__Ink_String(`preview`)), () => (__Ink_String(`both`))], [() => (__Ink_String(`both`)), () => (__Ink_String(`edit`))]]) })()) : (__ink_assgn_trgt.mode) = (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[mode] || null : (__ink_acc_trgt.mode !== undefined ? __ink_acc_trgt.mode : null)})(), [[() => (__Ink_String(`edit`)), () => (__Ink_String(`preview`))], [() => (__Ink_String(`preview`)), () => (__Ink_String(`both`))], [() => (__Ink_String(`both`)), () => (__Ink_String(`edit`))]]) })(); return __ink_assgn_trgt})());
toggleColorScheme = () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(colorScheme, (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[colorScheme] || null : (__ink_acc_trgt.colorScheme !== undefined ? __ink_acc_trgt.colorScheme : null)})(), [[() => (__Ink_String(`light`)), () => (__Ink_String(`dark`))], [() => (__Ink_String(`dark`)), () => (__Ink_String(`light`))]]) })()) : (__ink_assgn_trgt.colorScheme) = (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[colorScheme] || null : (__ink_acc_trgt.colorScheme !== undefined ? __ink_acc_trgt.colorScheme : null)})(), [[() => (__Ink_String(`light`)), () => (__Ink_String(`dark`))], [() => (__Ink_String(`dark`)), () => (__Ink_String(`light`))]]) })(); return __ink_assgn_trgt})(); bind(localStorage, __Ink_String(`setItem`))(__Ink_String(`colorScheme`), (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[colorScheme] || null : (__ink_acc_trgt.colorScheme !== undefined ? __ink_acc_trgt.colorScheme : null)})()); return render() })();
addFile = () => prompt(__Ink_String(`File name?`), __Ink_String(`Create`), text => __ink_and((len(text) > 0), every(map((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})(), name => __ink_negate((() => { return __ink_eq(name, text) })())))), fileName => __ink_match(fileName, [[() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})()), fileName) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})())]) = fileName; return __ink_assgn_trgt})(); sort__ink_em__((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})()); __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[mode] || null : (__ink_acc_trgt.mode !== undefined ? __ink_acc_trgt.mode : null)})(), [[() => (__Ink_String(`preview`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(mode, DefaultMode()) : (__ink_assgn_trgt.mode) = DefaultMode(); return __ink_assgn_trgt})())]]); render(); return withFetch(__as_ink_string(__Ink_String(`/doc/`) + fileName), {method: __Ink_String(`PUT`), body: __Ink_String(``)}, () => (() => { setActive(fileName); return focusEditor() })()) })())]]));
focusEditor = () => (() => { let ta; return __ink_match(ta = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.editor-textarea`)), [[() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { bind(ta, __Ink_String(`setSelectionRange`))(0, 0); return bind(ta, __Ink_String(`focus`))() })())]]) })();
setDefaultActiveFile = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})(), [[() => ([]), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(document); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(title, __Ink_String(`Merlot`)) : (__ink_assgn_trgt.title) = __Ink_String(`Merlot`); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(activeFile, null) : (__ink_assgn_trgt.activeFile) = null; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(content, __Ink_String(``)) : (__ink_assgn_trgt.content) = __Ink_String(``); return __ink_assgn_trgt})(); return render() })())], [() => (__Ink_Empty), () => (setActive((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[files] || null : (__ink_acc_trgt.files !== undefined ? __ink_acc_trgt.files : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()))]]);
handleKeyEvents = evt => __ink_match([(() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), __ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[metaKey] || null : (__ink_acc_trgt.metaKey !== undefined ? __ink_acc_trgt.metaKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})())], [[() => ([__Ink_String(`h`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(sidebar__ink_qm__, __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })())) : (__ink_assgn_trgt.sidebar__ink_qm__) = __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })()); return __ink_assgn_trgt})()) })())], [() => ([__Ink_String(`y`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(sidebar__ink_qm__, __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })())) : (__ink_assgn_trgt.sidebar__ink_qm__) = __ink_negate((() => { return (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sidebar__ink_qm__] || null : (__ink_acc_trgt.sidebar__ink_qm__ !== undefined ? __ink_acc_trgt.sidebar__ink_qm__ : null)})() })()); return __ink_assgn_trgt})()) })())], [() => ([__Ink_String(`j`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return toggleMode() })())], [() => ([__Ink_String(`k`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`)); return addFile() })())], [() => ([__Ink_String(`e`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`)); return focusEditor() })())], [() => ([__Ink_String(`.`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`)); return toggleColorScheme() })())], [() => ([__Ink_String(`p`), true]), () => ((() => { bind(evt, __Ink_String(`preventDefault`)); return (() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[open(f(__Ink_String(`/view/{{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})()]), __Ink_String(`_blank`))] || null : (__ink_acc_trgt[open(f(__Ink_String(`/view/{{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})()]), __Ink_String(`_blank`))] !== undefined ? __ink_acc_trgt[open(f(__Ink_String(`/view/{{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[activeFile] || null : (__ink_acc_trgt.activeFile !== undefined ? __ink_acc_trgt.activeFile : null)})()]), __Ink_String(`_blank`))] : null)})() })())]]);
render = () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(className, (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[colorScheme] || null : (__ink_acc_trgt.colorScheme !== undefined ? __ink_acc_trgt.colorScheme : null)})()) : (__ink_assgn_trgt.className) = (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[colorScheme] || null : (__ink_acc_trgt.colorScheme !== undefined ? __ink_acc_trgt.colorScheme : null)})(); return __ink_assgn_trgt})(); return update(h(__Ink_String(`div`), [__Ink_String(`app`), __ink_match(Touch__ink_qm__, [[() => (true), () => (__Ink_String(`has-touch`))], [() => (__Ink_Empty), () => (__Ink_String(``))]])], [Header(), Sidebar(), __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[mode] || null : (__ink_acc_trgt.mode !== undefined ? __ink_acc_trgt.mode : null)})(), [[() => (__Ink_String(`preview`)), () => (null)], [() => (__Ink_Empty), () => (Editor())]]), __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[editor] || null : (__ink_acc_trgt.editor !== undefined ? __ink_acc_trgt.editor : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[mode] || null : (__ink_acc_trgt.mode !== undefined ? __ink_acc_trgt.mode : null)})(), [[() => (__Ink_String(`edit`)), () => (null)], [() => (__Ink_Empty), () => (Preview())]])])) })();
bind((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[documentElement] || null : (__ink_acc_trgt.documentElement !== undefined ? __ink_acc_trgt.documentElement : null)})(), __Ink_String(`addEventListener`))(__Ink_String(`keydown`), handleKeyEvents);
withFetch(__Ink_String(`/doc/`), {}, data => (() => { let fileName; let files; files = filter(split(data, Newline), s => (len(s) > 0)); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(files, files) : (__ink_assgn_trgt.files) = files; return __ink_assgn_trgt})(); render(); fileName = slice((() => {let __ink_acc_trgt = __as_ink_string(location); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[pathname] || null : (__ink_acc_trgt.pathname !== undefined ? __ink_acc_trgt.pathname : null)})(), 1, len((() => {let __ink_acc_trgt = __as_ink_string(location); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[pathname] || null : (__ink_acc_trgt.pathname !== undefined ? __ink_acc_trgt.pathname : null)})())); fileName = replace(fileName, __Ink_String(`%20`), __Ink_String(` `)); return __ink_match(len(filter(files, f => __ink_eq(f, fileName))), [[() => (0), () => (setDefaultActiveFile())], [() => (__Ink_Empty), () => (setActive(fileName))]]) })());
render()

